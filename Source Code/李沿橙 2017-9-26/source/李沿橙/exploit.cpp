#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <bitset>
using std::cin;
using std::cout;
using std::endl;
typedef int INT;
inline INT readIn()
{
	INT a = 0;
	bool minus = false;
	char ch = getchar();
	while (!(ch == '-' || ch >= '0' && ch <= '9')) ch = getchar();
	if (ch == '-')
	{
		minus = true;
		ch = getchar();
	}
	while (ch >= '0' && ch <= '9')
	{
		a *= 10;
		a += ch;
		a -= '0';
		ch = getchar();
	}
	if (minus) a = -a;
	return a;
}

const INT maxn = 100005;
INT n, damage, cure, w;
bool type[maxn];
INT num[maxn];

template <class T>
void maxe(T& a, const T b)
{
	a = a < b ? b : a;
}

#define RunInstance(x) delete new x
struct work
{
	double f[maxn];

	work()
	{
		f[n + 1] = 0;
		for (int i = n; i >= 1; i--)
		{
			if (type[i])
			{
				f[i] = std::max(f[i + 1], f[i + 1] * double(damage) / 100 + num[i]);
			}
			else
			{
				f[i] = std::max(f[i + 1], f[i + 1] * double(cure) / 100 - num[i]);
			}
		}
		printf("%.2f\n", f[1] * w);
	}
};
struct cheat2
{
	double f[2][1005];
	double ans;

	static inline double p(INT nC)
	{
		return double(w) * std::pow(double(cure) / 100, nC);
	}

	cheat2() : ans()
	{
		for (int i = 0; i <= n; i++)
		{
			f[0][i] = -1e100;
		}

		double ret = 0;
		INT nC = 0;
		f[0][0] = 0;
		for (int i = 1; i <= n; i++)
		{
			INT cnt = i & 1;
			INT pre = !cnt;
			if (!type[i]) nC++;

			if (!type[i])
			{
				for (int j = 0; j <= nC; j++)
				{
					f[cnt][j] = -1e100;
				}
				for (int j = 0; j <= nC; j++)
				{
					double& ans = f[cnt][j];
					if (j != nC) ans = f[pre][j];
					if (j) maxe(ans, f[pre][j - 1] - p(j - 1) * num[i]);
				}
			}
			else
			{
				for (int j = 0; j <= nC; j++)
				{
					f[cnt][j] = f[pre][j];
					maxe(ret, f[cnt][j] + p(j) * num[i]);
				}
			}
		}
		printf("%.2f\n", ret);
	}
};
struct cheat1
{
	double f[2][105][105];
	static inline double p(INT nD, INT nC)
	{
		return double(w) * std::pow(double(damage) / 100, nD) * std::pow(double(cure) / 100, nC);
	}

	cheat1()
	{
		for (int i = 0; i <= n; i++)
		{
			for (int j = 0; j <= n; j++)
			{
				f[0][i][j] = -1e100;
			}
		}

		f[0][0][0] = 0;
		INT nD = 0, nC = 0;
		for (int i = 1; i <= n; i++)
		{
			INT cnt = i & 1;
			INT pre = !cnt;

			if (type[i]) nD++;
			else nC++;

			for (int j = 0; j <= nD; j++)
			{
				for (int k = 0; k <= nC; k++)
				{
					f[cnt][j][k] = -1e100;
				}
			}

			for (int j = 0; j <= nD; j++)
			{
				for (int k = 0; k <= nC; k++)
				{
					double& ans = f[cnt][j][k];
					if (type[i])
					{
						if (j != nD) ans = f[pre][j][k];
						if (j) maxe(ans, f[pre][j - 1][k] + p(j - 1, k) * num[i]);
					}
					else
					{
						if (k != nC) ans = f[pre][j][k];
						if (k) maxe(ans, f[pre][j][k - 1] - p(j, k - 1) * num[i]);
					}
				}
			}
		}
		double ans = 0;
		for (int i = 0; i <= nD; i++)
		{
			for (int j = 0; j <= nC; j++)
			{
				maxe(ans, f[n & 1][i][j]);
			}
		}
		printf("%.2f\n", ans);
	}
};

void run()
{
	n = readIn();
	damage = 100 - readIn();
	cure = 100 + readIn();
	w = readIn();
	for (int i = 1; i <= n; i++)
	{
		type[i] = readIn() & 1;
		num[i] = readIn();
	}
	if (n <= 100) RunInstance(cheat1);
	else if (damage == 0 && n <= 1000) RunInstance(cheat2);
	else RunInstance(work);
}

int main()
{
#ifndef JUDGE
	freopen("exploit.in", "r", stdin);
	freopen("exploit.out", "w", stdout);
#endif
	run();
	return 0;
}